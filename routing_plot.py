#!/usr/bin/env python3

import pandas as pd
import matplotlib.pyplot as plt
import os
import sys

# ==============================================================================
# Configuration
# ==============================================================================

# --- Input: Path to the CSV file generated by run_routing.sh ---
CSV_PATH = "lab4/sec1/routing_comparison/results_routing.csv"

# --- Output: Directory to save the generated plot images ---
PLOT_DIR = "lab4/sec1/routing_comparison/plots"

# --- Plotting Style ---
# Metrics to plot (Y-axis) vs. InjectionRate (X-axis)
METRICS_TO_PLOT = {
    "Throughput": "Throughput (pkts/node/cycle)",
    "AvgTotalLatency": "Average Packet Latency (cycles)",
}

# Style cycles for lines and markers
ROUTING_STYLES = {
    0: {"color": "blue", "marker": "o", "linestyle": "-", "label": "Routing 0 (TABLE_)"},
    3: {"color": "green", "marker": "s", "linestyle": "--", "label": "Routing 3 (XYZ_)"},
    4: {"color": "red", "marker": "^", "linestyle": ":", "label": "Routing 4 (WestFirst)"},
}

# ==============================================================================
# Script Logic
# ==============================================================================

def main():
    """Main function to load data and generate plots."""
    # --- 1. Pre-flight checks and setup ---
    if not os.path.exists(CSV_PATH):
        print(f"ERROR: CSV file not found at '{CSV_PATH}'", file=sys.stderr)
        print("Please run ./run_routing.sh first.", file=sys.stderr)
        sys.exit(1)

    print(f"Reading data from: {CSV_PATH}")
    try:
        df = pd.read_csv(CSV_PATH)
    except pd.errors.EmptyDataError:
        print(f"ERROR: CSV file '{CSV_PATH}' is empty.", file=sys.stderr)
        sys.exit(1)

    os.makedirs(PLOT_DIR, exist_ok=True)
    print(f"Plots will be saved to: {PLOT_DIR}")

    # --- 2. Get unique dimensions for plotting ---
    topologies = df["Topology"].unique()
    traffics = df["Traffic"].unique()

    # --- 3. Generate a plot for each metric, topology, and traffic pattern ---
    for metric_key, y_label in METRICS_TO_PLOT.items():
        for topo in topologies:
            for traffic in traffics:
                # Filter data for the current scenario
                subset = df[(df["Topology"] == topo) & (df["Traffic"] == traffic)]

                if subset.empty:
                    continue

                print(f"Plotting [{metric_key}] for Topology='{topo}', Traffic='{traffic}'...")

                # Create figure
                fig, ax = plt.subplots(figsize=(12, 8))

                # Plot a line for each routing algorithm
                for routing_algo in sorted(subset["Routing"].unique()):
                    routing_data = subset[subset["Routing"] == routing_algo].sort_values("InjectionRate")
                    style = ROUTING_STYLES.get(routing_algo, {})
                    ax.plot(
                        routing_data["InjectionRate"],
                        routing_data[metric_key],
                        label=style.get("label", f"Routing {routing_algo}"),
                        color=style.get("color"),
                        marker=style.get("marker"),
                        linestyle=style.get("linestyle")
                    )

                # --- 4. Finalize and save the plot ---
                ax.set_title(f"{metric_key} vs. Injection Rate\nTopology: {topo}, Traffic: {traffic}")
                ax.set_xlabel("Injection Rate (pkts/node/cycle)")
                ax.set_ylabel(y_label)
                ax.grid(True, which="both", linestyle="--", linewidth=0.5)
                ax.legend()

                # Save the figure
                plot_filename = f"{PLOT_DIR}/{metric_key}_{topo}_{traffic}.png"
                fig.savefig(plot_filename, dpi=300, bbox_inches="tight")
                plt.close(fig)

    print("\nAll plots generated successfully.")

if __name__ == "__main__":
    main()
